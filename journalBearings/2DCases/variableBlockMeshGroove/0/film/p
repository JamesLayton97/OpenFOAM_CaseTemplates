/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/TEHL";
    object      p;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -1 -2 0 0 0 0];

internalField   uniform 1e5;

boundaryField
{
    film_to_shaft 
    {
        type            zeroGradient;
    }
    filmsides
    {
        type            zeroGradient;
    }
    filminlet_to_groove
    {
	type 		codedFixedValue;
	value 		uniform 17e4;

	name		codedMappedInlet;

	code
	#{
		const fvMesh& grooveFvMesh = db().parent().objectRegistry::lookupObject<fvMesh>("groove");
		label samplePatchID = grooveFvMesh.boundaryMesh().findPatchID("groove_to_filminlet");
		const volScalarField& pGroove = grooveFvMesh.thisDb().objectRegistry::lookupObject<volScalarField>("p");
		const vectorField& sampleCf = grooveFvMesh.Cf().boundaryField()[samplePatchID]; 
		const fvPatchField& sampleField = pGroove.boundaryField()[samplePatchID];

		const fvPatch& boundaryPatch = this->patch();
		const vectorField& Cf = boundaryPatch.Cf();
		scalarField& field = *this;

		forAll(Cf, faceId)
		{
			const vector& faceCenter = Cf[faceId];
			
			scalar minDistance(100);
		        label nearestFaceId;	
			forAll(sampleCf, sampleFaceId)
			{
				scalar distance = mag(Cf[faceId] - sampleCf[sampleFaceId]);
				if(distance < minDistance)
				{
					minDistance = distance;
					nearestFaceId = sampleFaceId;
				}
			}

			field[faceId] = pGroove.boundaryField()[samplePatchID][nearestFaceId];
		}
	#};
    }
    filmoutlet_to_groove
    {
	type 		codedFixedValue;
	value 		uniform 17e4;

	name		codedMappedOutlet;
	
	code
	#{
		const fvMesh& grooveFvMesh = db().parent().objectRegistry::lookupObject<fvMesh>("groove");
		label samplePatchID = grooveFvMesh.boundaryMesh().findPatchID("groove_to_filmoutlet");
		const volScalarField& pGroove = grooveFvMesh.thisDb().objectRegistry::lookupObject<volScalarField>("p");
		const vectorField& sampleCf = grooveFvMesh.Cf().boundaryField()[samplePatchID]; 
		const fvPatchField& sampleField = pGroove.boundaryField()[samplePatchID];

		const fvPatch& boundaryPatch = this->patch();
		const vectorField& Cf = boundaryPatch.Cf();
		scalarField& field = *this;

		forAll(Cf, faceId)
		{
			const vector& faceCenter = Cf[faceId];
			
			scalar minDistance(100);
		        label nearestFaceId;	
			forAll(sampleCf, sampleFaceId)
			{
				scalar distance = mag(Cf[faceId] - sampleCf[sampleFaceId]);
				if(distance < minDistance)
				{
					minDistance = distance;
					nearestFaceId = sampleFaceId;
				}
			}

			field[faceId] = pGroove.boundaryField()[samplePatchID][nearestFaceId];
		}
	#};
    }
    film_to_bush 
    {
        type            zeroGradient;
    }
    "procBoundary.*"
    {
	type		processor;
	value 		$internalField;
    }
}


// ************************************************************************* //
